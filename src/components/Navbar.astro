---
const { } = Astro.props;
import logo from '../assets/images/logo.svg'
---

<nav id="navbar" class="top-0 z-50 border-gray-200 bg-white px-4 py-2.5 transition-all dark:bg-gray-800 sm:px-4">
    <div class="container mx-auto flex flex-wrap items-center justify-between md:relative">
      <!-- LOGO -->
      <a href="/" class="flex items-center">
        <img src={logo} class="h-6 sm:h-9" alt="Kamal Redzwan Logo" />
      </a>
      <!-- END: LOGO -->

      <div class="flex md:order-2">
        <!-- CONTACT BUTTON -->
        <a href="#contact" class="mr-3 rounded-lg bg-teal-400 px-5 py-2.5 text-center text-base font-medium text-white hover:bg-teal-600 focus:outline-none focus:ring-4 focus:ring-teal-300 dark:bg-teal-600 dark:hover:bg-teal-400 dark:focus:ring-teal-600 md:mr-0">Contact</a>
        <!-- END: CONTACT BUTTON -->

        <!-- MENU BUTTON -->
        <button data-collapse-toggle="mobile-menu" type="button" class="inline-flex items-center rounded-lg p-2 text-sm text-gray-800/70 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600 md:hidden" aria-controls="mobile-menu" aria-expanded="false">
          <span class="sr-only">Open main menu</span>
          <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
          </svg>
          <svg class="hidden h-6 w-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
          </svg>
        </button>

        <!-- END: MENU BUTTON -->

        <!-- DARK MODE TOGGLE -->
        <button id="theme-toggle" type="button" class="ml-2 rounded-lg p-2.5 text-sm text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-700 md:absolute md:top-0 md:right-[7rem]">
          <svg id="theme-toggle-dark-icon" class="hidden h-5 w-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>
          <svg id="theme-toggle-light-icon" class="hidden h-5 w-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
        </button>
        <!-- END: DARK MODE TOGGLE -->
      </div>

      <div class="hidden w-full items-center justify-between md:order-1 md:ml-[4.5rem] md:flex md:w-auto" id="mobile-menu">
        <ul class="mt-4 flex flex-col md:mt-0 md:flex-row md:space-x-8 md:text-sm md:font-medium">
          <!-- NAV ITEMS-->
          <li>
            <a href="#home" class="navbarlink block rounded bg-teal-400 py-2 pr-4 pl-3 text-base text-white dark:text-white md:bg-transparent md:p-0 md:text-teal-400" aria-current="page">Home</a>
          </li>
          <li>
            <a href="#specialty" class="navbarlink block border-b border-gray-100 py-2 pr-4 pl-3 text-base text-gray-700/80 hover:bg-gray-50 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white md:border-0 md:p-0 md:hover:bg-transparent md:hover:text-teal-400 md:dark:hover:bg-transparent md:dark:hover:text-white">Specialty</a>
          </li>

          <li>
            <a href="#projects" class="navbarlink block border-b border-gray-100 py-2 pr-4 pl-3 text-base text-gray-700/80 hover:bg-gray-50 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white md:border-0 md:p-0 md:hover:bg-transparent md:hover:text-teal-400 md:dark:hover:bg-transparent md:dark:hover:text-white">Projects</a>
          </li>
          <!-- END: NAV ITEMS-->
        </ul>
      </div>
    </div>
</nav>

<script is:inline>

    const Default = {
        triggerEl: null,
        onCollapse: () => {},
        onExpand: () => {},
        onToggle: () => {},
    }

    class Collapse {
    constructor(targetEl = null, options) {
        this._targetEl = targetEl
        this._triggerEl = options ? options.triggerEl : Default.triggerEl
        this._options = { ...Default, ...options }
        this._visible = false
        this._init()
    }

    _init() {
        if (this._triggerEl) {
        if (this._triggerEl.hasAttribute('aria-expanded')) {
            this._visible = this._triggerEl.getAttribute('aria-expanded') === 'true' ? true : false
        } else {
            // fix until v2 not to break previous single collapses which became dismiss
            this._visible = this._targetEl.classList.contains('hidden') ? false : true
        }

        this._triggerEl.addEventListener('click', () => {
            this._visible ? this.collapse() : this.expand()
        })
        }
    }

    collapse() {
        this._targetEl.classList.add('hidden')
        if (this._triggerEl) {
        this._triggerEl.setAttribute('aria-expanded', 'false')
        }
        this._visible = false

        // callback function
        this._options.onCollapse(this)
    }

    expand() {
        this._targetEl.classList.remove('hidden')
        if (this._triggerEl) {
        this._triggerEl.setAttribute('aria-expanded', 'true')
        }
        this._visible = true

        // callback function
        this._options.onExpand(this)
    }

    toggle() {
        if (this._visible) {
        this.collapse()
        } else {
        this.expand()
        }
    }
    }

    window.Collapse = Collapse

    document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('[data-collapse-toggle]').forEach(triggerEl => {
        const targetEl = document.getElementById(triggerEl.getAttribute('data-collapse-toggle'))
        new Collapse(targetEl, {
        triggerEl: triggerEl,
            })
        })
    })

    /* ================================= */
    /* =========== Dark Mode =========== */
    /* ================================= */

    var themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon')
    var themeToggleLightIcon = document.getElementById('theme-toggle-light-icon')

    // Change the icons inside the button based on previous settings
    if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
    themeToggleLightIcon.classList.remove('hidden')
    } else {
    themeToggleDarkIcon.classList.remove('hidden')
    }

    var themeToggleBtn = document.getElementById('theme-toggle')

    themeToggleBtn.addEventListener('click', function () {
    // toggle icons inside button
    themeToggleDarkIcon.classList.toggle('hidden')
    themeToggleLightIcon.classList.toggle('hidden')

    // if set via local storage previously
    if (localStorage.getItem('color-theme')) {
        if (localStorage.getItem('color-theme') === 'light') {
        document.documentElement.classList.add('dark')
        localStorage.setItem('color-theme', 'dark')
        } else {
        document.documentElement.classList.remove('dark')
        localStorage.setItem('color-theme', 'light')
        }

        // if NOT set via local storage previously
    } else {
        if (document.documentElement.classList.contains('dark')) {
        document.documentElement.classList.remove('dark')
        localStorage.setItem('color-theme', 'light')
        } else {
        document.documentElement.classList.add('dark')
        localStorage.setItem('color-theme', 'dark')
            }
        }
    })

    /* ================================= */
    /* ==== Appear NavBar On Scroll ==== */
    /* ================================= */

    const sectionHeroEl = document.querySelector('#home')
    const nav = document.querySelector('#navbar')

    const obs = new IntersectionObserver(
    function (entries) {
        const ent = entries[0]
        console.log(ent)

        if (ent.isIntersecting === false) {
        navbar.classList.add('sticky')
        }

        if (ent.isIntersecting === true) {
        navbar.classList.remove('sticky')
        }
    },
    {
        // In the viewport
        root: null,
        threshold: 0,
        rootMargin: '-80px',
    }
    )
    obs.observe(sectionHeroEl)

    /* ================================= */
    /* == Smooth scrolling animation  == */
    /* ================================= */

    const allLinks = document.querySelectorAll('a:link')

    allLinks.forEach(function (link) {
    link.addEventListener('click', function (e) {
        e.preventDefault()
        const href = link.getAttribute('href')

        // Scroll back to top
        if (href === '#')
        window.scrollTo({
            top: 0,
            behavior: 'smooth',
        })

        // Scroll to other links
        if (href !== '#' && href.startsWith('#')) {
        const sectionEl = document.querySelector(href)
        sectionEl.scrollIntoView({ behavior: 'smooth' })
        }
    })
})

</script>
